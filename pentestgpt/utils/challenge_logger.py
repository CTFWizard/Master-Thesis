class ChallengeLogger:
    def __init__(self, challenge_name="", log_dir="logs/", 
                 useRAG=False, useDetect=False, useDynamic=False, 
                 reasoning_model="Unknown", generation_model="Unknown", 
                 parsing_model="Unknown"):
        
        self.challenge_name = challenge_name
        self.log_dir = self.ensure_trailing_slash(log_dir)
        self.log_entries = []
        self.useRAG = useRAG
        self.useDetect = useDetect
        self.useDynamic = useDynamic
        self.reasoning_model = reasoning_model
        self.generation_model = generation_model
        self.parsing_model = parsing_model
        

    def ensure_trailing_slash(self, path):
        return path if path.endswith("/") else path + "/"
    
    def log_interaction(self, user_prompt, response):
        self.log_entries.append((user_prompt, response))
        with open(self.log_dir+self.challenge_name+".log", 'w') as file:
            file.write(f"Challenge: {self.challenge_name}\n\n")
            file.write(f"""Settings: 
    Reasoning Model:  {self.reasoning_model}
    Generation Model: {self.generation_model}
    Parsing Model:    {self.parsing_model}

    useRAG:           {self.useRAG}
    useDynamic:       {self.useDynamic}
    useDetect:        {self.useDetect}

--------------------------------------------------------------------------\n""")
            for user_prompt, response in self.log_entries:
                file.write(f"user_prompt: {user_prompt}\nresponse: {response}\n--------------------------------------------------------------------------\n")


if __name__ == "__main__":
    logger = ChallengeLogger("Sample Challenge_test", "../../logs/", useRAG=True, useDetect=True, useDynamic=True, reasoning_model="gpt4all", generation_model="gpt4all", parsing_model="gpt4all")
    logger.log_interaction("What is 2+2?", "The answer is 4.")
    logger.log_interaction("What is the capital of France?", "The capital of France is Paris.")
